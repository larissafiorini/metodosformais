model hotel

class Key end
class Card end
class Guest end
class Payment end
class Desk end

constraints
context Desk inv oneDesk: Desk.allInstances->size=1

association fst between
    Card [*] role card4fst
    Key [1] role key4fst
end
association snd between
    Card [*] role card4snd
    Key [1] role key4snd
end
association key between
    Room [*] role room4key
    Key [1] role key4key
end
association prev between
    Desk [*] role desk4prev
    Room [*] role room4prev
    Key [0..1] role key4prev
end
association issued between
    Desk [*] role desk4issued
    Key [*] role key4issued
end
association cards between
    Guest [*] role guest4cards
    Card [*] role card4cards
end
association pay between 
    Guest [1] role guest4pay
    Payment [0..1] role pay4guest
    RoomService [1] role pay4service
end
association room_payment between
    RoomService [1] role payReceived
    Payment [0..1] role payroom
end    


class Room
operations
    init()
    post prev_eq_key:
        self.key4prev = Set{self.key4key}
    post issued_eq_room_key:
        Desk.allInstances.key4issued = Room.allInstances.key4key
        post no_cards:
        Card.allInstances.guest4cards->isEmpty
        
        checkin(g:Guest)
        pre key_exists:
        Key.allInstances->exists(k| Desk.allInstances.key4issued->excludes(k))
        post fst_snd_ok_cards_issued_prev_updated:
        Card.allInstances->exists(c|
        self.key4prev->includes(c.key4fst) and
        Desk.allInstances.key4issued->excludes(c.key4snd) and
        g.card4cards = g.card4cards@pre->including(c) and
        Desk.allInstances->forAll(d|
        d.key4issued = d.key4issued@pre->including(c.key4snd)) and
        self.key4prev = Set{c.key4snd})
        post key_unchanged:
        self.key4key@pre = self.key4key
        
        enter(g:Guest)
        pre key_matches:
            g.card4cards->exists(c|
                let k = key4key in c.key4snd = k or c.key4fst = k)
        post key_updated:
            g.card4cards->exists(c|
            let k = key4key in
            (c.key4snd = k and self.key4key = self.key4key@pre) or
            (c.key4fst = k and self.key4key = c.key4snd))
        post issued_unchanged:
            Desk.allInstances->forAll(d|d.key4issued@pre = d.key4issued)
        post prev_unchanged:
            Room.allInstances->forAll(r|
            self.desk4prev@pre = self.desk4prev
            and self.key4prev@pre = self.key4prev)
        post cards_unchanged:
            Card.allInstances->forAll(c|c.guest4cards@pre = c.guest4cards)
        
    end
    
class RoomService
attributes
	service_payment : Payment
operations
    init()
    pay(c: Card, g: Guest, p: Payment)
        pre card_matches:
            g.card4cards->includes(c)
        pre payment_isnull:
			self.service_payment.oclIsUndefined()  
		post payment_done: 
			self.service_payment = p
end
